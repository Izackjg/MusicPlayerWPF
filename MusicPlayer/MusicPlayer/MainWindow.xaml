<Window x:Class="MusicPlayer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MusicPlayer"
        mc:Ignorable="d"
        Title="Local MP3 Player" Height="484" Width="550" ResizeMode="CanMinimize">
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="White"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="FontSize" Value="22"/>
                                <!--<Setter Property="Background" TargetName="border" Value="#FFFFFF"/>-->
                                <!--<Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>-->
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="RenderTransform" TargetName="border">
                                    <Setter.Value>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0.9" ScaleY="0.8"/>
                                            <SkewTransform AngleX="0.1" AngleY="0.1"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="5" Y="5"/>
                                        </TransformGroup>
                                    </Setter.Value>
                                </Setter>
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>-->
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="DataGridCell.IsSelected" Value="true">
                                <Setter Property="Background" Value="AliceBlue"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderBrush" Value="#FF688CAF"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column="1" Grid.Row="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid>
        <Button x:Name="btnPlayPause" Content="" Margin="247,10,247,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnPlayPause_Click"/>
        <Button x:Name="btnNextTrack" Content="" Margin="330,10,162,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnNextTrack_Click"/>
        <Button x:Name="btnLastTrack" Content="" Margin="169,10,325,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnLastTrack_Click"/>
        <Button x:Name="btnShuffle" Content="" Margin="84,10,408,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnShuffle_Click"/>
        <Button x:Name="btnRepeat" Content="" Margin="414,10,78,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnRepeat_Click"/>
        <Button x:Name="btnAddTrack" Content="+" Margin="484,10,10,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnAddTrack_Click"/>
        <DataGrid x:Name="dataGrid" RowHeaderWidth="0" ItemsSource="{Binding MusicQueue}"  Margin="8,200,10,0" VerticalAlignment="Top" Height="245" IsReadOnly="True" CanUserSortColumns="False" CanUserAddRows="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False" MouseDoubleClick="dataGrid_MouseDoubleClick">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Title" Width="350" Binding="{Binding Title}" />
                <DataGridTextColumn Header="Duration" Width="*" Binding="{Binding StringDuration}" />
            </DataGrid.Columns>
        </DataGrid>


        <ProgressBar Name="musicProgress" Height="10" Margin="85,86,79,0" VerticalAlignment="Top" Foreground="#404040" Background="#b3b3b3" Width="380" BorderThickness="0,0,0,0" MouseLeftButtonDown="musicProgress_LeftMouseDown"/>
        <Label x:Name="lblCurrentProgress" Content="00:00" FontSize="16" HorizontalContentAlignment="Center"  Margin="6,74,464,0" VerticalAlignment="Top" Height="29" Foreground="#000000" />
        <Label x:Name="lblMaxTime" Content="00:00" FontSize="16" HorizontalContentAlignment="Center" Margin="470,74,6,0" VerticalAlignment="Top" Height="29" Foreground="#000000"/>


        <Label x:Name="lblCurrentlyPlaying" Content="Currently Playing: " FontSize="14" HorizontalContentAlignment="Left" Margin="10,117,10,0" VerticalAlignment="Top" Height="29" Foreground="#000000"/>
        <Button x:Name="btnMute" Content="🔊" Margin="472,146,22,0" VerticalAlignment="Top" FontSize="24" Height="49" Width="50" BorderThickness="0,0,0,0" Click="btnMute_Click"/>
        <Slider x:Name="slider" Margin="63,169,77,0" VerticalAlignment="Top" VerticalContentAlignment="Center" Maximum="30" Value="10" ValueChanged="slider_ValueChanged"  Height="26"/>
        <Label x:Name="lblVolumeTxt" Content="Volume" HorizontalAlignment="Left" Margin="8,162,0,0" VerticalAlignment="Top" VerticalContentAlignment="Center"/>
        <Button x:Name="btnNightMode" Content="💤" Margin="10,10,484,0" VerticalAlignment="Top" FontSize="24" Width="50" Height="50" BorderThickness="0,0,0,0" Click="btnNightMode_Click"/>
    </Grid>
</Window>
